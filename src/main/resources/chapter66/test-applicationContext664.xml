<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">


    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

    <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/testdb" />
        <property name="username" value="root" />
        <property name="password" value="0000" />
    </bean>

    <bean id="userDao" class="basics.tobyspring6.chapter61.UserDaoJdbc611">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="userService" class="basics.tobyspring6.chapter66.UserServiceImpl664">
        <property name="userDao" ref="userDao"/>
    </bean>

    <bean id="testUserService" parent="userService" class="basics.tobyspring6.chapter66.UserServiceTest664$TestUserServiceImpl"/>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

<!--    <bean id="transactionAdvice" class="org.springframework.transaction.interceptor.TransactionInterceptor">-->
<!--        <property name="transactionManager" ref="transactionManager" />-->
<!--        <property name="transactionAttributes">-->
<!--            <props>-->
<!--                <prop key="get*">PROPAGATION_REQUIRED, readOnly, timeout_30</prop>-->
<!--                <prop key="upgrade*">PROPAGATION_REQUIRES_NEW,ISOLATION_SERIALIZABLE</prop>-->
<!--                <prop key="*">PROPAGATION_REQUIRED</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--    </bean>-->
<!--위처럼 스프링이 제공하는 TransactionInterceptor 클래스를 bean 로 하나하나 트랜잭션 속성을 정의했었는데-->
<!--그걸 아래처럼 tx 네임스페이스 advice 태그로 좀 더 가독성 있고 간결하게 표현하기를 추천함-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" propagation="REQUIRED" read-only="true" timeout="30" />
            <tx:method name="upgrade*" propagation="REQUIRES_NEW" isolation="SERIALIZABLE"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>



<!--    <bean id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut">-->
<!--        <property name="expression" value="execution(* *..*ServiceImpl*(..))"/>-->
<!--    </bean>-->
<!--위처럼 스프링이 제공하는 AspectJExpressionPointcut 를 bean 으로 등록해두고 포인트컷 표현식을 넣어줬었는데-->
<!--아래처럼 aop 네임스페이스의 config 태그를 이용해서 속성값으로 바로 넣어주는 쪽이 좋음.-->
<!--    <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">-->
<!--        <property name="advice" ref="transactionAdvice" />-->
<!--        <property name="pointcut" ref="transactionPointcut" />-->
<!--    </bean>-->
<!--    Adivisor 를 등록하는 것도 스프링이 제공하는 DefaultPointcutAdvisor 클래스를 bean 으로 등록해 두고 advice 랑 pointcut 을 직접 넣어줬었는데-->
<!--    아래처럼 aop 네임스페이스의 config 태그로 한 번에 모아서 선언해주기를 추천함-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="transactionPointcut" expression="execution(* *..*ServiceImpl*.upgrade*(..))"/>-->
<!--        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>-->
<!--    </aop:config>-->
<!--    위처럼 pointcut 을 따로 선언해두고 ref 참조해오는 방법도 있지만 값을 바로 넣어주는 방법이 더 간결함. 물론 여러 번 재사용할 거면 따로 두는 편이 나음-->
    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* *..*ServiceImpl*.upgrade*(..))"/>
    </aop:config>

</beans>